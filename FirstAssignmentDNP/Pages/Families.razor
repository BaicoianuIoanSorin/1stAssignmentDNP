@page "/Families"
@using FileData
@using Models
@using System.Security.Claims
@using FirstAssignmentDNP.Data
@inject FileContext FileContext
@inject IUsersData UsersData
@inject NavigationManager NavigationManager

<h1>Family list</h1>

<div class="container row">
    <div class="col-lg-4">
        <p>
            Filter by Family Id: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width: 50px"/>
        </p>
    </div>
    <div class="col-lg-4">
        <p>Filter by Familyname: <input type="text" @oninput="@((arg) => FilterByLastName(arg))" style="width: 100px"/></p>
    </div>
</div>
<p>
</p>

<!--- Whenever this page is requested, the code will be evealuated and
replaced with its result, thereby building the resulting html page,
which is shown in the browser. --->
@if (families == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!families.Any())
{
    <p>
        <em>No Family items exist. Please add some.</em>
    </p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
            <tr>
                <th scope="col">Family</th>
                <th scope="col">Adults</th>
                <th scope="col">Children</th>
                <th scope="col">Pets</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in families)
            {
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                           <img src="Images/Families/@item.Photo" alt="Family photo" style="width: 45px; height: 45px;" class="rounded-circle">
                        <div class="mx-3">
                            <p class="fw-bold mb-1">Family ID: @item.Id</p>
                            <p class="text-muted mb-0">Address Info: @item.StreetName, Nr. @item.HouseNumber</p>
                            <p class="text-info mb-0">Familyname: @item.Adults[0].LastName</p>
                        </div>
                        </div>
                    </td>
                    <td>@item.Adults.Count</td>
                    <td>@item.Children.Count</td>
                    <td>@item.Pets.Count</td>
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="@(() => MoreInfo(@item.Id))">
                            More INFO
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private IList<Family> families;
    private IList<Family> allFamilies;
    private ClaimsPrincipal _userClaimsPrincipal;
    private User _user;

    private int? filterById;
    private string? filterByLastname;

    protected override async Task OnInitializedAsync()
    {
        allFamilies = FileContext.Families;
        families = allFamilies;
    }

    private async Task RemoveTodo(int familyId)
    {
        Family familyToRemove = families.First(f => f.Id == familyId);
        FileContext.Families.Remove(familyToRemove);
        allFamilies.Remove(familyToRemove);
        families.Remove(familyToRemove);
        FileContext.SaveChanges();
    }

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }
        if (filterById != null)
        {
            families = allFamilies.Where(f => f.Id == filterById).ToList();
        }
        else
        {
            families = allFamilies;
        }
        ExecuteFilterFamily();
    }

    private void FilterByLastName(ChangeEventArgs changeEventArgs)
    {
        filterByLastname = null;
        try
        {
            filterByLastname = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {

        }
        if (filterByLastname != null)
        {
            families = allFamilies.Where(f => f.Adults[0].LastName.Equals(filterByLastname)).ToList();
        }
        else
        {
            families = allFamilies;
        }
        ExecuteFilterFamily();
    }

    public void MoreInfo(int Id)
    {
        NavigationManager.NavigateTo($"FamilyInfo/{Id}");
    }

    private void ExecuteFilterFamily()
    {
        families = allFamilies.Where(f => (filterById != null && f.Id == filterById
                                           || filterById == null) && (filterByLastname != null && f.Adults[0].LastName.Equals(filterByLastname) || filterByLastname == null)).ToList();
    }

}